// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  name             String
  email            String            @unique
  password         String
  role             USER_ROLE         @default(user)
  contactNo        String?           @default("")
  address          String?           @default("")
  profileImg       String?           @default("")
  permissions      USER_PERMISSION[] @default([])
  reviewAndRatings ReviewAndRating[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  orders    Order[]

  @@map("users")
}

enum USER_ROLE {
  user
  admin
  super_admin
}

enum USER_PERMISSION {
  category
  service
  portfolio
  order
}

model Category {
  id       String    @id @default(uuid())
  title    String
  services Service[]

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt()
  portfolios Portfolio[]

  @@map("categories")
}

model Service {
  id          String  @id @default(uuid())
  title       String
  image       String?
  description String

  categoryId       String
  category         Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  reviewAndRatings ReviewAndRating[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  orders Order[]

  @@map("services")
}

model Portfolio {
  id          String  @id @default(uuid())
  image       String? @default("")
  description String
  client      String
  location    String
  year        String

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@map("portfolios")
}

model ReviewAndRating {
  id     String @id @default(uuid())
  review String
  rating Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId String

  createdAt DateTime @default(now())

  @@map("review_ratings")
}

model Order {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId String

  status        ORDER_STATUS @default(pending)
  address       String
  visiting_date DateTime
  visiting_hour String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@map("orders")
}

enum ORDER_STATUS {
  pending
  confirmed
  complete
  cancle
}
